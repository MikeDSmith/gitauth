== GitAuth - SSH-based authentication for Shared Git Repositories.

If you've heard of Gitosis before, GitAuth is like Gitosis but A) in Ruby, B) slightly simpler to get going and C) doesn't use a git repository to manage users.

At the moment configuration / adding users is done via a single command - +gitauth+. For usage, see below.

=== License

GitAuth is licensed under AGPL, with parts of the code being derived
from Gitorius - http://gitorious.org/

=== Installing GitAuth

Getting started is relatively simple. First of, you'll need to log onto the remote server / your git host. Next, you'll need to install the gem:

  sudo gem install brownbeagle-gitauth --source=https://gems.github.com/
  
Once that's done, the +gitauth+ and +gitauth-shell+ commands should be in your path.
Next, you'll want to (in most cases anyway) use a specific +git+ user to host repositories.

Using the example of ubuntu, we'll add a git user under which all actions will now take place (note, this is essentially the same as gitosis):

  sudo adduser --disabled-password --shell /bin/bash --group --home /home/git --system --gecos 'gitauth user for version control' git
  
Now, whenever you run the +gitauth+ executable, you'll do so as the user you just created
above. For simplicity purposes, I added the the following to my zsh profile so I always
had it available. If you don't wish to, just use as you would without the alias:

  alias asgit='sudo -H -u git'
  
And finally, to create a settings file and initialize .ssh and authorized_keys:

  asgit gitauth install
  
Note that if you append a path to a public key to the end of the install command,
it will initialize a new +admin+ user who can also login via SSH. e.g.

  asgit gitauth install id_rsa.pub
  
Would initialize an admin user with the given public key.

Note that from now on, all gitauth keys should be run either logged in as
git (via the admin user and ssh) or by being prefixed with asgit or "sudo -H -u git"

=== Adding Users

Whenever you want to add a user, it's ass imple as:

  gitauth adduser user-name path-to-public-key
  
Note that if the --admin option is specified, the user will
be able to log in to the shell via SSH and will also be able
to access any repository.

=== Adding Repositories

Adding a repository is a two step process. First, you create it:

  gitauth addrepo repo-name
  
Then, for every user who needs access, you do:

  gitauth permissions repo-name user-name permission-type
  
Where permission type is read, write or all. If permission
type isn't specified, it will default to all.

=== Accessing repos:

Finally, once you've added users / repos, using them is as simple
as doing the following on each users computer:

  git clone git@your-remote-host:repo-name

Or

  git clone git@your-remote-host:repo-name.git
  
Either form working just as well.

Note that for the first time you push, you will need
to use the full form:

  git push origin master

As it starts as an empty repo.